import { identityInfo } from './modules/security/managed-identity.bicep'

targetScope = 'subscription'

@description('Key-value pairs of tags to assign to all resources. The default azd tags are automatically added.')
param deploymentTags object
var tags = union(azdTags, deploymentTags)

// Environment name. This is automatically set by the 'azd' tool.
@description('Environment name used as a tag for all resources. This is directly mapped to the azd-environment.')
param environmentName string = ''

// Tag settings
// default required tags for azd deployment
var azdTags = { 'azd-env-name': environmentName }

var abbrs = loadJsonContent('./abbreviations.json')
var roles = loadJsonContent('./roles.json')

@description('Name of the resource group where all resources will be created. When empty, the name is autogenerated.')
param resourceGroupName string
var _resourceGroupName = !empty(resourceGroupName) ? resourceGroupName : '${abbrs.managementGovernance.resourceGroup}-${environmentName}'

var suffix = toLower(uniqueString(subscription().id, environmentName, location))

@description('Identities to assign roles to.')
param identities identityInfo[] = union([], [{
  principalId: principalId
  principalType: 'User'
}])

@description('Location for the Static Web App and Azure Function App. Only the following locations are allowed: centralus, eastus2, westeurope, westus2, southeastasia')
@allowed([
  'centralus'
  'eastus2'
  'westeurope'
  'westus2'
  'southeastasia'
])
param location string

@description('Location for the Azure OpenAI account')
@allowed([
  'East US'
  'East US 2'
  'France Central'
  'Germany West Central'
  'Japan East'
  'Korea Central'
  'North Central US'
  'Norway East'
  'Poland Central'
  'South Africa North'
  'South Central US'
  'South India'
  'Southeast Asia'
  'Spain Central'
  'Sweden Central'
  'Switzerland North'
  'Switzerland West'
  'UAE North'
  'UK South'
  'West Europe'
  'West US'
  'West US 3'
])
param aoaiLocation string

@description('Network isolation? If yes it will create the private endpoints.')
@allowed([true, false])
param networkIsolation bool = false
var _networkIsolation = networkIsolation

@minLength(6)
@maxLength(72)
@description('Test vm gpt user password. Use strong password with letters and numbers. Needed only when choosing network isolation and create bastion option. If not creating with network isolation you can write anything. Password must be between 6-72 characters long and must satisfy at least 3 of password complexity requirements from the following: 1-Contains an uppercase character, 2-Contains a lowercase character, 3-Contains a numeric digit, 4-Contains a special character, 5- Control characters are not allowed.')
@secure()
param vmUserInitialPassword string

@description('Deploy VM? If yes it will create the virtual machine to access the network isolated environment in the zero trust configuration.')
@allowed([true, false])
param deployVM bool = false
var _deployVM = deployVM

@description('Deploy VPN?')
@allowed([true, false])
param deployVPN bool = false
var _deployVPN = deployVPN

@description('Test vm gpt user name. Needed only when choosing network isolation and create bastion option. If not you can leave it blank.')
param vmUserName string = ''
var _vmUserName = !empty(vmUserName) ? vmUserName : 'adp-user'

// PricipalId that will have access to KeyVault secrets, this is automatically set by the 'azd' tool to the principal runing azd
@description('Id of the user or app to assign application roles')
param principalId string = ''

@description('The name of the Zero Trust VM. If left empty, a random name will be generated.')
param ztVmName string = ''
var _ztVmName = !empty(ztVmName) ? ztVmName : 'testvm-${suffix}'

@description('The name of the VM Key Vault Secret. If left empty, a random name will be generated.')
param vmKeyVaultSecName string = ''
var _vmKeyVaultSecName = !empty(vmKeyVaultSecName) ? vmKeyVaultSecName : 'vmUserInitialPassword'

// flag that indicates if we're reusing a vnet
var _vnetReuse = _azureReuseConfig.vnetReuse

@description('Virtual network name, you can leave as it is to generate a random name.')
param vnetName string = ''
var _vnetName = _azureReuseConfig.vnetReuse ? _azureReuseConfig.existingVnetName : !empty(vnetName) ? vnetName : '${abbrs.networking.virtualNetwork}ai-${suffix}'

@description('Address space for the virtual network')
param vnetAddress string = ''
var _vnetAddress = !empty(vnetAddress) ? vnetAddress : '10.0.0.0/23'

@description('Forked Git repository URL for the Static Web App')
param userPrincipalId string

// Environment name. This is automatically set by the 'azd' tool.
@description('Environment name used as a tag for all resources. This is directly mapped to the azd-environment.')
// param environmentName string = 'dev'
var hostingPlanName = '${abbrs.compute.appServicePlan}${suffix}'
var processingFunctionAppName = '${abbrs.compute.functionApp}processing-${suffix}'
// var webBackEndFunctionAppName = '${abbrs.compute.functionApp}webbackend-${suffix}'
// var staticWebAppName = '${abbrs.compute.staticWebApp}${suffix}'
var storageAccountName = '${abbrs.storage.storageAccount}${suffix}'
var funcStorageName = '${abbrs.storage.storageAccount}${suffix}func'
var keyVaultName = '${abbrs.security.keyVault}${suffix}'
var aoaiName = '${abbrs.ai.openAIService}${suffix}'
var aiMultiServicesName = '${abbrs.ai.aiMultiServices}${suffix}'
var appInsightsName = '${abbrs.managementGovernance.applicationInsights}${suffix}'
var logAnalyticsName = '${abbrs.managementGovernance.logAnalyticsWorkspace}${suffix}'
var appConfigName = '${abbrs.configuration.appConfiguration}${suffix}'


@description('The name of the Azure Configuration Private Endpoint. If left empty, a random name will be generated.')
param azureAppConfigPe string = ''
var _azureAppConfigPe = !empty(azureAppConfigPe) ? azureAppConfigPe : '${abbrs.configuration.appConfiguration}${abbrs.networking.privateEndpoint}${suffix}'

@description('The name of the Azure AI Services Private Endpoint. If left empty, a random name will be generated.')
param azureAiServicesPe string = ''
var _azureAiServicesPe = !empty(azureAiServicesPe) ? azureAiServicesPe : '${abbrs.ai.aiServices}${abbrs.networking.privateEndpoint}${suffix}'


@description('The name of the Azure AI Services Private Endpoint. If left empty, a random name will be generated.')
param azureAiMultiServicesPe string = ''
var _azureAiMultiServicesPe = !empty(azureAiMultiServicesPe) ? azureAiMultiServicesPe : '${abbrs.ai.aiMultiServices}${abbrs.networking.privateEndpoint}${suffix}'

@description('The name of the Azure Storage Account Private Endpoint. If left empty, a random name will be generated.')
param azureBlobStorageAccountPe string = ''
var _azureBlobStorageAccountPe = !empty(azureBlobStorageAccountPe) ? azureBlobStorageAccountPe : '${abbrs.storage.storageAccount}blob${abbrs.networking.privateEndpoint}${suffix}'

param azureTableStorageAccountPe string = ''
var _azureTableStorageAccountPe = !empty(azureTableStorageAccountPe) ? azureTableStorageAccountPe : '${abbrs.storage.storageAccount}table${abbrs.networking.privateEndpoint}${suffix}'

param azureQueueStorageAccountPe string = ''
var _azureQueueStorageAccountPe = !empty(azureQueueStorageAccountPe) ? azureQueueStorageAccountPe : '${abbrs.storage.storageAccount}queue${abbrs.networking.privateEndpoint}${suffix}'

param azureFileStorageAccountPe string = ''
var _azureFileStorageAccountPe = !empty(azureFileStorageAccountPe) ? azureFileStorageAccountPe : '${abbrs.storage.storageAccount}file${abbrs.networking.privateEndpoint}${suffix}'

@description('The name of the Azure Storage Account Private Endpoint. If left empty, a random name will be generated.')
param processingFuncAppPe string = ''
var _processingfunctionAppPe = !empty(processingFuncAppPe) ? processingFuncAppPe : 'func-proc-${abbrs.networking.privateEndpoint}${suffix}'

@description('The name of the Azure Key Vault Private Endpoint. If left empty, a random name will be generated.')
param azureKeyvaultPe string = ''
var _azureKeyvaultPe = !empty(azureKeyvaultPe) ? azureKeyvaultPe : '${abbrs.security.keyVault}${abbrs.networking.privateEndpoint}${suffix}'

resource resourceGroup 'Microsoft.Resources/resourceGroups@2024-03-01' = {
  name: _resourceGroupName
  location: location
  tags: union(tags, {})
}

module logAnalyticsWorkspace './modules/management_governance/log-analytics-workspace.bicep' = {
  scope : resourceGroup
  name: logAnalyticsName
  params: {
    name: logAnalyticsName
    location: location
    retentionInDays: 30
    publicNetworkAccessForIngestion: _networkIsolation?'Disabled':'Enabled'
    publicNetworkAccessForQuery: _networkIsolation?'Disabled':'Enabled'
  }
}

module azureMonitorPrivateLinkScope './modules/security/private-link-scope.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope: resourceGroup
  name: '${abbrs.networking.privateLink}${suffix}'
  params: {
    privateLinkScopeName: '${abbrs.networking.privateLink}${suffix}'
    privateLinkScopedResources: [
      logAnalyticsWorkspace.outputs.id
      appInsights.outputs.id
    ]
  }
}

module automationDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'automation-dnzones'
  scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.agentsvc.azure-automation.net'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module odsInsightsDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'odsinsights-dnzones'
  scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.ods.opinsights.azure.com'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module omsInsightsDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'omsinsights-dnzones'
  scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.oms.opinsights.azure.com'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module azMonitorDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'azmonitor-dnzones'
  scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.monitor.azure.com'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

var logAnalyticsPEName = '${abbrs.managementGovernance.logAnalyticsWorkspace}${abbrs.security.privateEndpoint}${suffix}'
module logAnalyticsPe './modules/network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: logAnalyticsPEName
  scope: resourceGroup
  params: {
    location: location
    name: logAnalyticsPEName
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: azureMonitorPrivateLinkScope.outputs.id
    groupIds: ['azuremonitor']
    dnsZoneId: _networkIsolation?azMonitorDnsZone.outputs.id:''
    //privateLinkServiceConnectionName: 'logAnalytics'
  }
}

// App Insights Module
module appInsights './modules/management_governance/application-insights.bicep' = {
  scope : resourceGroup
  name: appInsightsName
  params: {
    name: appInsightsName
    location: location
    appInsightsReuse : false
    logAnalyticsReuse: false
    existingAppInsightsResourceGroupName : resourceGroup.name
    logAnalyticsWorkspaceId: logAnalyticsWorkspace.outputs.id
    suffix : suffix
    publicNetworkAccessForIngestion: _networkIsolation?'Disabled':'Enabled'
    publicNetworkAccessForQuery: _networkIsolation?'Disabled':'Enabled'
  }
}

var secureAppSettings = [
  {
    name: 'OPENAI_API_KEY'
    value: aoaiAccountModule.outputs.AOAI_API_KEY
  }
]

var appSettings = [
  {
    name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'
    value: appInsights.outputs.connectionString
  }
  {
    name: 'FUNC_STORAGE_ACCOUNT_NAME'
    value : funcStorageName
  }
  {
    name: 'DATA_STORAGE_ACCOUNT_NAME'
    value: storageAccountName
  }
  {
    name: 'DATA_STORAGE_ENDPOINT'
    value: 'https://${storageAccountName}.blob.${environment().suffixes.storage}'
  }
  {
    name: 'PROMPT_FILE'
    value: 'prompts.yaml'
  }
  {
    name: 'OPENAI_API_VERSION'
    value: '2024-05-01-preview'
  }
  {
    name: 'OPENAI_API_BASE'
    value: aoaiAccountModule.outputs.AOAI_ENDPOINT
  }
  {
    name: 'OPENAI_API_EMBEDDING_MODEL'
    value: 'text-embedding-ada-002'
  }
  {
    name: 'OPENAI_MODEL'
    value: 'gpt-4o'
  }
  {
    name: 'AIMULTISERVICES_ENDPOINT'
    value: aiMultiServices.outputs.aiMultiServicesEndpoint
  }
  {
    name: 'PROCESSING_FUNCTION_APP_NAME'
    value: processingFunctionAppName
  }
  {
    name: 'PROCESSING_FUNCTION_APP_URL'
    value: '${processingFunctionAppName}.azurewebsites.net'
  }
  {
    name: 'SAS_TOKEN_EXPIRY_HOURS'
    value: 24
  }
  {
    name : 'USE_SAS_TOKEN'
    value: 'false'
  }
  {
    name: 'NEXT_STAGE'
    value: 'silver'
  }
]

module vaultDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'vault-dnzones'
  params: {
    dnsZoneName: 'privatelink.vaultcore.azure.net' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module keyvaultpe './modules/network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'keyvaultpe'
  params: {
    location: location
    name: _azureKeyvaultPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: keyVault.outputs.id
    groupIds: ['Vault']
    dnsZoneId: _networkIsolation?vaultDnsZone.outputs.id:''
  }
}

var keyVaultSecretsUserIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: keyVaultSecretsUserRole.id
    principalType: identity.principalType
  }
]
// 
var keyVaultSecretsUserIdentityAssignmentsAll = concat(keyVaultSecretsUserIdentityAssignments,
[
  {
    principalId: uaiFrontendMsi.outputs.principalId
    roleDefinitionId: keyVaultSecretsUserRole.id
    principalType: 'ServicePrincipal'
  }
])

var subnets = reduce(
  map(vnet.outputs.subnets, subnet => {
      '${subnet.name}': {
        id: subnet.id
        addressPrefix: subnet.properties.addressPrefix
      }
    }),
  {},
  (cur, acc) => union(cur, acc)
)

// 1. Key Vault
module keyVault './modules/security/key-vault.bicep' = {
  scope : resourceGroup
  name: 'keyVaultModule'
  params: {
    name: keyVaultName
    location: location
    //tenantId: tenantId
    keyVaultReuse: _azureReuseConfig.keyVaultReuse
    existingKeyVaultResourceGroupName: resourceGroupName
    secureAppSettings: secureAppSettings
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
    roleAssignments: concat(keyVaultSecretsUserIdentityAssignmentsAll, [])
    subnets : (_networkIsolation && !_vnetReuse) ? [
      {
        name: 'aiSubId'
        id: _networkIsolation?vnet.outputs.aiSubId:''
      }
      {
        name: 'databaseSubId'
        id: _networkIsolation?vnet.outputs.databaseSubId:''
      }
      {
        name: 'appIntSubId'
        id: _networkIsolation?vnet.outputs.appIntSubId:''
      }
      {
        name: 'appServiceSubId'
        id: _networkIsolation?vnet.outputs.appServicesSubId:''
      }
    ] : []
  }
}

module keyVaultAccessFunc1 './modules/rbac/keyvault-access.bicep' = {
  scope : resourceGroup
  name: 'keyvault-access-${processingFunctionAppName}'
  params: {
    principalId: processingFunctionApp.outputs.identityPrincipalId
    roleDefinitionId: keyVaultSecretsUserRole.id
    principalType: 'ServicePrincipal'
    resourceName: keyVault.outputs.name
  }
}

module keyVaultAccessPolicies './modules/rbac/keyvault-access-policy.bicep' = {
  scope : resourceGroup
  name: 'keyvault-access-${keyVaultName}'
  params: {
    permissions: {
      secrets: [ 'get', 'list', 'set', 'delete' ]
    }
    principalId: processingFunctionApp.outputs.identityPrincipalId
    resourceName: keyVault.outputs.name
  }
}

module keyVaultAdmin './modules/rbac/role.bicep' = {
  scope : resourceGroup
  name: 'keyvault-admin-${keyVaultName}'
  params: {
    principalId: principalId
    roleDefinitionId: roles.security.keyVaultAdministrator
    principalType: 'User'
  }
}

module aiservicesDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'aiservices-dnzones'
  params: {
    dnsZoneName: 'privatelink.cognitiveservices.azure.com' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module openaiDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  name: 'openai-dnzones'
  scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.openai.azure.com'
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module aiServicesPe './modules/network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'aiServicesPe'
  params: {
    location: location
    name: _azureAiServicesPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: aoaiAccountModule.outputs.id
    groupIds: ['account']
    dnsZoneId: _networkIsolation?openaiDnsZone.outputs.id:''
  }
  dependsOn: [
    aoaiAccountModule
  ]
}

// 2. OpenAI
module aoaiAccountModule './modules/ai_ml/aoai-account.bicep' = {
  scope : resourceGroup
  name: 'aoaiAccountModuleDeployment'
  params: {
    location: aoaiLocation
    aoaiName: aoaiName
    customSubDomainName: aoaiName
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
  }
}

module aoaiModelDeploymentModule './modules/ai_ml/modelDeployment.bicep' = {
  name: 'aoaiModelDeployment'
  scope: resourceGroup
  params: {
    aiServicesName: aoaiAccountModule.outputs.name
    deploymentName: 'gpt-4o'
    modelName: 'gpt-4o'
  }
  dependsOn: [
    aoaiAccountModule
  ]
}

module documentsDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'documents-dnzones'
  params: {
    dnsZoneName: 'privatelink.documents.azure.com' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module vnet './modules/network/vnet.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'virtual-network'
  params: {
    location: location
    vnetName: _vnetName
    vnetReuse: _vnetReuse
    deployVPN: _deployVPN
    existingVnetResourceGroupName: _azureReuseConfig.existingVnetResourceGroupName
    tags: tags
    vnetAddress: _vnetAddress
    appServicePlanId: hostingPlan.outputs.id
    appServicePlanName: hostingPlan.outputs.name
  }
}

module vpnGateway './modules/network/vnet-vpn-gateway.bicep' = if (_networkIsolation && !_vnetReuse && _deployVPN) {
  scope : resourceGroup
  name: 'vpn-gateway'
  params: {
    location: location
    vnetName: _vnetName
    tags: tags
  }
}

module appConfigDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'appconfig-dnzones'
  //scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.azconfig.io' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module appConfigPe './modules/network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'appConfigPe'
  params: {
    location: location
    name: _azureAppConfigPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: appConfig.outputs.id
    groupIds: ['configurationStores']
    dnsZoneId: _networkIsolation?appConfigDnsZone.outputs.id:''
  }
}

var appConfigurationManagedIdentityName = '${abbrs.security.managedIdentity}${abbrs.configuration.appConfiguration}${suffix}'
module applicationManagedIdentity './modules/security/managed-identity.bicep' = {
  scope: resourceGroup
  name: appConfigurationManagedIdentityName
  params: {
    name: appConfigurationManagedIdentityName
    location: location
    tags: union(tags, {})
  }
}

module appConfig './modules/app_config/appconfig.bicep' = {
  scope : resourceGroup
  name: 'appconfig'
  params: {
    name : appConfigName
    //administratorObjectId: principalId
    //administratorPrincipalType: 'User'
    //actionGroupId: ''
    appSettings: appSettings
    secureAppSettings: keyVault.outputs.secrets
    location: location
    tags: tags
    identityId: applicationManagedIdentity.outputs.id
    //logAnalyticsWorkspaceResourceId: _azureReuseConfig.existingLogAnalyticsWorkspaceResourceId ?? ''
    //vaultName: keyVault.outputs.name
    //privateDnsZones: []
    resourceToken: suffix
    //timestamp: ''
    //subnetId: (_networkIsolation && !_vnetReuse)?vnet.outputs.appIntSubId:''
    //uaiId: ''  //uaiAppConfig.id
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
  }
}

module blobDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'blob-dnzones'
  params: {
    dnsZoneName: 'privatelink.blob.${environment().suffixes.storage}' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module queueDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'queue-dnzones'
  params: {
    dnsZoneName: 'privatelink.queue.${environment().suffixes.storage}' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module tableDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'table-dnzones'
  params: {
    dnsZoneName: 'privatelink.table.${environment().suffixes.storage}' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module fileDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'file-dnzones'
  params: {
    dnsZoneName: 'privatelink.file.${environment().suffixes.storage}' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module storagePe './modules/storage/storage-private-endpoints.bicep' = if (_networkIsolation && !_vnetReuse){
  scope : resourceGroup
  name: 'storage-pe'
  dependsOn: [
    vnet
    storage
    blobDnsZone
    queueDnsZone
    tableDnsZone
    fileDnsZone
  ]
  params: {
    location: location
    name: storageAccountName
    tags: tags
    vnetName: _vnetName
  }
}

module storage './modules/storage/storage-account.bicep' = {
  scope : resourceGroup
  name: 'storage'
  params: {
    name: storageAccountName
    location: location
    storageReuse: _azureReuseConfig.storageReuse
    existingStorageResourceGroupName: _azureReuseConfig.existingStorageResourceGroupName
    tags: tags
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
    allowBlobPublicAccess: false // Disable anonymous access
    containers: [
      { name: 'bronze', publicAccess: 'None' }
      { name: 'silver', publicAccess: 'None' }
      { name: 'gold', publicAccess: 'None' }      
      { name: 'prompts', publicAccess: 'None' }      
    ]
    deleteRetentionPolicy: {
      enabled: true
      days: 7
    }
    networkAcls : {
      resourceAccessRules :[]
      bypass: 'AzureServices'
      defaultAction: _networkIsolation?'Deny':'Allow'
      ipRules : []
      virtualNetworkRules : (_networkIsolation && !_vnetReuse) ? [
        {
          id: vnet.outputs.aiSubId
          action: 'Allow'
        }
      ] : []
    }
  }  
}

module procStoragePe './modules/storage/storage-private-endpoints.bicep' = if (_networkIsolation && !_vnetReuse){
  scope : resourceGroup
  name: 'proc-storage-pe'
  dependsOn: [
    vnet
    procFuncStorage
    queueDnsZone
    tableDnsZone
    fileDnsZone
  ]
  params: {
    location: location
    name: '${abbrs.storage.storageAccount}${suffix}fnproc'
    tags: tags
    vnetName: _vnetName
  }
}

module procFuncStorage './modules/storage/storage-account.bicep' = {
  scope : resourceGroup
  name: 'procfuncstorage'
  params: {
    name: funcStorageName // '${abbrs.storage.storageAccount}${suffix}func'
    location: location
    storageReuse: _azureReuseConfig.storageReuse
    existingStorageResourceGroupName: _azureReuseConfig.existingStorageResourceGroupName
    tags: tags
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
    allowBlobPublicAccess: false // Disable anonymous access
    deleteRetentionPolicy: {
      enabled: true
      days: 7
    }
    networkAcls : {
      resourceAccessRules :[]
      bypass: 'AzureServices'
      defaultAction: _networkIsolation?'Deny':'Allow'
      ipRules : []
      virtualNetworkRules : (_networkIsolation && !_vnetReuse) ? [
        {
          id: vnet.outputs.aiSubId
          action: 'Allow'
        }
      ] : []
    }
  }  
}

module hostingPlan './modules/compute/hosting-plan.bicep' = {
  scope : resourceGroup
  name: 'hostingPlan'
  params: {
    name: hostingPlanName
    location: location
    sku: 'S3'
    tags: tags
  }
}

module websitesDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'websites-dnzones'
  params: {
    dnsZoneName: 'privatelink.azurewebsites.net' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module processingFunctionAppPe './modules/network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: _processingfunctionAppPe
  params: {
    location: location
    name: _processingfunctionAppPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: processingFunctionApp.outputs.id
    groupIds: ['sites']
    dnsZoneId: _networkIsolation?websitesDnsZone.outputs.id:''
  }
}

module uaiFrontendMsi './modules/security/managed-identity.bicep' = {
  scope: resourceGroup
  name: '${abbrs.security.managedIdentity}${processingFunctionAppName}'
  params: {
    name: 'uai-${processingFunctionAppName}'
    location: location
    tags: union(tags, {})
  }
}

// 3. FunctionApp
module processingFunctionApp './modules/compute/functionApp.bicep' = {
  scope : resourceGroup
  name: processingFunctionAppName
  params: {
    identityId: uaiFrontendMsi.outputs.id
    principalId: uaiFrontendMsi.outputs.principalId
    clientId : uaiFrontendMsi.outputs.clientId
    appName: processingFunctionAppName
    appPurpose: 'processing'
    location: location
    hostingPlanName : hostingPlanName
    applicationInsightsName: appInsights.outputs.name
    storageAccountName: storage.outputs.name
    funcStorageName: procFuncStorage.outputs.name
    aoaiEndpoint: aoaiAccountModule.outputs.AOAI_ENDPOINT
    appConfigName: appConfigName
    tags: union(tags , { 'azd-service-name' : 'processing' })
    networkIsolation: _networkIsolation
    virtualNetworkSubnetId : _networkIsolation?vnet.outputs.appServicesSubId:''
    appSettings: [
      
    ]
  }
}

resource storageContributorRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup
  name: roles.storage.storageAccountContributor
}

resource storageDataOwnerRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup
  name: roles.storage.storageBlobDataOwner
}

resource storageQueueDataRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup
  name: roles.storage.storageQueueDataContributor
}

resource storageTableDataRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup
  name: roles.storage.storageTableDataContributor
}

resource storageFileContributorRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup
  name: roles.storage.storageFileDataPrivilegedContributor
}

var allstorageDataOwnerIdentityAssignments = concat([], [
  {
    principalId: processingFunctionApp.outputs.identityPrincipalId
    roleDefinitionId: storageDataOwnerRole.id
    principalType: 'ServicePrincipal'
  }
])

module storageDataOwnerResourceGroupRoleAssignment './modules/security/resource-group-role-assignment.bicep' = {
  name: '${resourceGroupName}-role-storage-data-owner'
  scope: resourceGroup
  params: {
    roleAssignments: (userPrincipalId != '') ? concat(allstorageDataOwnerIdentityAssignments, [{
      principalId: userPrincipalId
      roleDefinitionId: storageDataOwnerRole.id
      principalType: 'User'
    }]) : allstorageDataOwnerIdentityAssignments
  }
}

var allstorageQueueDataIdentityAssignments = concat([], [
  {
    principalId: processingFunctionApp.outputs.identityPrincipalId
    roleDefinitionId: storageQueueDataRole.id
    principalType: 'ServicePrincipal'
  }
])

module storageQueueResourceGroupRoleAssignment './modules/security/resource-group-role-assignment.bicep' = {
  name: '${resourceGroupName}-role-storage-queue-data'
  scope: resourceGroup
  params: {
    roleAssignments: (userPrincipalId != '') ? concat(allstorageQueueDataIdentityAssignments, [{
      principalId: userPrincipalId
      roleDefinitionId: storageDataOwnerRole.id
      principalType: 'User'
    }]) : allstorageQueueDataIdentityAssignments
  }
}

var allstorageTableDataIdentityAssignments = concat([], [
  {
    principalId: processingFunctionApp.outputs.identityPrincipalId
    roleDefinitionId: storageTableDataRole.id
    principalType: 'ServicePrincipal'
  }
])

module storageTableResourceGroupRoleAssignment './modules/security/resource-group-role-assignment.bicep' = {
  name: '${resourceGroupName}-role-storage-table'
  scope: resourceGroup
  params: {
    roleAssignments: (userPrincipalId != '') ? concat(allstorageTableDataIdentityAssignments, [{
      principalId: userPrincipalId
      roleDefinitionId: storageDataOwnerRole.id
      principalType: 'User'
    }]) : allstorageTableDataIdentityAssignments
  }
}

// Invoke the role assignment module for Storage Queue Data Contributor
var allstorageAccountContributorIdentityAssignments = concat([], [
  {
    principalId: processingFunctionApp.outputs.identityPrincipalId
    roleDefinitionId: storageContributorRole.id
    principalType: 'ServicePrincipal'
  }
])


module storageAccountResourceGroupRoleAssignment './modules/security/resource-group-role-assignment.bicep' = {
  name: '${resourceGroupName}-role-storage-account-contributor'
  scope: resourceGroup
  params: {
    roleAssignments: (userPrincipalId != '') ? concat(allstorageAccountContributorIdentityAssignments, [{
      principalId: userPrincipalId
      roleDefinitionId: storageContributorRole.id
      principalType: 'User'
    }]) : allstorageAccountContributorIdentityAssignments
  }
}

var allstorageFileContribIdentityAssignments = concat([], [
  {
    principalId: processingFunctionApp.outputs.identityPrincipalId
    roleDefinitionId: storageFileContributorRole.id
    principalType: 'ServicePrincipal'
  }
]
)

module storageFileContribResourceGroupRoleAssignment './modules/security/resource-group-role-assignment.bicep' = {
  name: '${resourceGroupName}-role-storage-file-contributor'
  scope: resourceGroup
  params: {
    roleAssignments: (userPrincipalId != '') ? concat(allstorageFileContribIdentityAssignments, [{
      principalId: userPrincipalId
      roleDefinitionId: storageFileContributorRole.id
      principalType: 'User'
    }]) : allstorageFileContribIdentityAssignments
  }
}

resource cogServicesUserRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup
  name: roles.ai.cognitiveServicesUser
}

var allcogServicesUserIdentityAssignments = concat([], [
  {
    principalId: processingFunctionApp.outputs.identityPrincipalId
    roleDefinitionId: cogServicesUserRole.id
    principalType: 'ServicePrincipal'
  }
])


module cogServicesUserResourceGroupRoleAssignment './modules/security/resource-group-role-assignment.bicep' = {
  name: '${resourceGroupName}-role-cog-services-user'
  scope: resourceGroup
  params: {
    roleAssignments: (userPrincipalId != '') ? concat(allcogServicesUserIdentityAssignments, [{
      principalId: userPrincipalId
      roleDefinitionId: cogServicesUserRole.id
      principalType: 'User'
    }]) : allcogServicesUserIdentityAssignments
  }
}

resource cogServicesOpenAIUserRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup
  name: roles.ai.cognitiveServicesOpenAIUser
}

var allcogServicesOpenAIUserIdentityAssignments = concat([], [
  {
    principalId: processingFunctionApp.outputs.identityPrincipalId
    roleDefinitionId: cogServicesOpenAIUserRole.id
    principalType: 'ServicePrincipal'
  }
])


module cogServicesOpenAIUserResourceGroupRoleAssignment './modules/security/resource-group-role-assignment.bicep' = {
  name: '${resourceGroupName}-role-cog-services-openai-user'
  scope: resourceGroup
  params: {
    roleAssignments: (userPrincipalId != '') ? concat(allcogServicesOpenAIUserIdentityAssignments, [{
      principalId: userPrincipalId
      roleDefinitionId: cogServicesOpenAIUserRole.id
      principalType: 'User'
    }]) : allcogServicesOpenAIUserIdentityAssignments
  }
}

resource contributorRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup
  name: roles.general.contributor
}

resource appConfigDataOwnerRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup
  name: roles.configuration.appConfigurationDataOwner
}

var appConfigDataOwnerIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: appConfigDataOwnerRole.id
    principalType: identity.principalType
  }
]

var allConfigDataOwnerIdentityAssignments = concat(appConfigDataOwnerIdentityAssignments, [
  {
    principalId: aiMultiServiceManagedIdentity.outputs.principalId
    roleDefinitionId: appConfigDataOwnerRole.id
    principalType: 'ServicePrincipal'
  }
  {
    principalId: processingFunctionApp.outputs.identityPrincipalId
    roleDefinitionId: appConfigDataOwnerRole.id
    principalType: 'ServicePrincipal'
  }
])

var contributorIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: contributorRole.id
    principalType: identity.principalType
  }
]

module resourceGroupRoleAssignment './modules/security/resource-group-role-assignment.bicep' = {
  name: '${resourceGroupName}-role-appconfig'
  scope: resourceGroup
  params: {
    roleAssignments: (userPrincipalId != '') ? concat(contributorIdentityAssignments, allConfigDataOwnerIdentityAssignments, [{
      principalId: userPrincipalId
      roleDefinitionId: cogServicesOpenAIUserRole.id
      principalType: 'User'
    }]) : concat(contributorIdentityAssignments, [], allConfigDataOwnerIdentityAssignments)
  }
}

resource keyVaultSecretsUserRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup
  name: roles.security.keyVaultSecretsUser
}


var aiMultiServiceManagedIdentityName = '${abbrs.security.managedIdentity}${abbrs.ai.aiMultiServices}${suffix}'
module aiMultiServiceManagedIdentity './modules/security/managed-identity.bicep' = {
  scope: resourceGroup
  name: aiMultiServiceManagedIdentityName
  params: {
    name: aiMultiServiceManagedIdentityName
    location: location
    tags: union(tags, {})
  }
}

module aiMultiServicesPe './modules/network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'aiMultiServicesPe'
  params: {
    location: location
    name: _azureAiMultiServicesPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: aiMultiServices.outputs.id
    groupIds: ['account']
    dnsZoneId: _networkIsolation?aiservicesDnsZone.outputs.id:''
  }
}

// 6. Azure AI Multi Services
module aiMultiServices './modules/ai_ml/aimultiservices.bicep' = {
  scope : resourceGroup
  name: 'aiMultiServicesModule'
  params: {
    aiMultiServicesName: aiMultiServicesName
    location: location
    identityId: aiMultiServiceManagedIdentity.outputs.id
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
  }
}

module testvm './modules/vm/dsvm.bicep' = if ((_networkIsolation && !_vnetReuse) || _deployVM)  {
  scope : resourceGroup
  name: 'testvm'
  params: {
    location: location
    name: _ztVmName
    tags: tags
    subnetId: subnets['aiSubnet'].id
    bastionSubId: subnets['AzureBastionSubnet'].id
    vmUserPassword: vmUserInitialPassword
    vmUserName: _vmUserName
    keyVaultName: keyVault.outputs.name
    // this is the named of the secret to store the vm password in keyvault. It matches what is used on main.parameters.json
    vmUserPasswordKey: _vmKeyVaultSecName
    principalId: principalId
    azdEnvironmentName: environmentName
  }
}

output RESOURCE_GROUP string = resourceGroup.name
output FUNCTION_APP_NAME string = processingFunctionApp.outputs.name
output AZURE_STORAGE_ACCOUNT string = storage.outputs.name
output FUNCTION_URL string = processingFunctionApp.outputs.uri
output OPENAI_API_VERSION string = processingFunctionApp.outputs.openaiApiVersion
output OPENAI_API_BASE string = processingFunctionApp.outputs.openaiApiBase
output OPENAI_MODEL string = processingFunctionApp.outputs.openaiModel
output FUNCTIONS_WORKER_RUNTIME string = processingFunctionApp.outputs.functionWorkerRuntime
output AIMULTISERVICES_NAME string = aiMultiServices.outputs.aiMultiServicesName
output AIMULTISERVICES_ENDPOINT string = aiMultiServices.outputs.aiMultiServicesEndpoint
output PROCESSING_FUNCTION_APP_NAME string = processingFunctionApp.outputs.name
output PROCESSING_FUNCTION_URL string = processingFunctionApp.outputs.uri
output APP_CONFIG_NAME string = appConfig.outputs.name
output KEY_VAULT_NAME string = keyVault.outputs.name

// Resue details
@description('Settings to define reusable resources.')
var _azureReuseConfigDefaults = {
  aoaiReuse: false
  existingAoaiResourceGroupName: ''
  existingAoaiName: ''
  appInsightsReuse: false
  existingAppInsightsResourceGroupName: ''
  existingAppInsightsName: ''
  appConfigReuse: false
  existingAppConfigResourceGroupName: ''
  existingAppConfigName: ''
  logAnalyticsWorkspaceReuse: false  
  existingLogAnalyticsWorkspaceResourceId: ''
  appServicePlanReuse: false
  existingAppServicePlanResourceGroupName: ''
  existingAppServicePlanName: ''
  aiSearchReuse: false
  existingAiSearchResourceGroupName: ''
  existingAiSearchName: ''
  aiServicesReuse: false
  existingAiServicesResourceGroupName: ''
  existingAiServicesName: ''
  cosmosDbReuse: false
  existingCosmosDbResourceGroupName: ''
  existingCosmosDbAccountName: ''
  existingCosmosDbDatabaseName : ''
  keyVaultReuse: false
  existingKeyVaultResourceGroupName: ''
  existingKeyVaultName: ''
  storageReuse: false
  existingStorageResourceGroupName: ''
  existingStorageName: ''
  vnetReuse: false
  existingVnetResourceGroupName: ''
  existingVnetName: ''
  orchestratorFunctionAppReuse: false
  existingOrchestratorFunctionAppResourceGroupName: ''
  existingOrchestratorFunctionAppName: ''  
  dataIngestionFunctionAppReuse: false
  existingDataIngestionFunctionAppResourceGroupName: ''
  existingDataIngestionFunctionAppName: ''  
  appServiceReuse: false
  existingAppServiceName: ''
  existingAppServiceNameResourceGroupName: ''
  orchestratorFunctionAppStorageReuse: false
  existingOrchestratorFunctionAppStorageName: ''
  existingOrchestratorFunctionAppStorageResourceGroupName: ''
  dataIngestionFunctionAppStorageReuse: false
  existingDataIngestionFunctionAppStorageName: ''
  existingDataIngestionFunctionAppStorageResourceGroupName: ''  
}

param azureReuseConfig object = {} 
var _azureReuseConfig = union(_azureReuseConfigDefaults, {
    aoaiReuse: (empty(azureReuseConfig.aoaiReuse) ? _azureReuseConfigDefaults.aoaiReuse : toLower(azureReuseConfig.aoaiReuse) == 'true')
    existingAoaiResourceGroupName: (empty(azureReuseConfig.existingAoaiResourceGroupName) ? _azureReuseConfigDefaults.existingAoaiResourceGroupName : azureReuseConfig.existingAoaiResourceGroupName)
    existingAoaiName: (empty(azureReuseConfig.existingAoaiName) ? _azureReuseConfigDefaults.existingAoaiName : azureReuseConfig.existingAoaiName)
    aiServicesReuse: (empty(azureReuseConfig.aiServicesReuse) ? _azureReuseConfigDefaults.aiServicesReuse : toLower(azureReuseConfig.aiServicesReuse) == 'true')
    existingAiServicesResourceGroupName: (empty(azureReuseConfig.existingAiServicesResourceGroupName) ? _azureReuseConfigDefaults.existingAiServicesResourceGroupName : azureReuseConfig.existingAiServicesResourceGroupName)
    existingAiServicesName: (empty(azureReuseConfig.existingAiServicesName) ? _azureReuseConfigDefaults.existingAiServicesName : azureReuseConfig.existingAiServicesName)
    //appConfigReuse: (empty(azureReuseConfig.appConfigReuse) ? _azureReuseConfigDefaults.appConfigReuse : toLower(azureReuseConfig.appConfigReuse) == 'true')
    //existingAppConfigResourceGroupName: (empty(azureReuseConfig.existingAppConfigResourceGroupName) ? _azureReuseConfigDefaults.existingAppConfigResourceGroupName : azureReuseConfig.existingAppConfigResourceGroupName)
    //existingAppConfigName: (empty(azureReuseConfig.existingAppConfigName) ? _azureReuseConfigDefaults.existingAppConfigName : azureReuseConfig.existingAppConfigName)
    appConfigReuse: false
    existingAppConfigResourceGroupName: ''
    existingAppConfigName: ''
    appInsightsReuse: (empty(azureReuseConfig.appInsightsReuse) ? _azureReuseConfigDefaults.appInsightsReuse : toLower(azureReuseConfig.appInsightsReuse) == 'true')
    existingAppInsightsResourceGroupName: (empty(azureReuseConfig.existingAppInsightsResourceGroupName) ? _azureReuseConfigDefaults.existingAppInsightsResourceGroupName : azureReuseConfig.existingAppInsightsResourceGroupName)
    existingAppInsightsName: (empty(azureReuseConfig.existingAppInsightsName) ? _azureReuseConfigDefaults.existingAppInsightsName : azureReuseConfig.existingAppInsightsName)
    logAnalyticsWorkspaceReuse: (empty(azureReuseConfig.logAnalyticsWorkspaceReuse) ? _azureReuseConfigDefaults.logAnalyticsWorkspaceReuse : toLower(azureReuseConfig.logAnalyticsWorkspaceReuse) == 'true')
    existingLogAnalyticsWorkspaceResourceId: (empty(azureReuseConfig.existingLogAnalyticsWorkspaceResourceId) ? _azureReuseConfigDefaults.existingLogAnalyticsWorkspaceResourceId : azureReuseConfig.existingLogAnalyticsWorkspaceResourceId)
    appServicePlanReuse: (empty(azureReuseConfig.appServicePlanReuse) ? _azureReuseConfigDefaults.appServicePlanReuse : toLower(azureReuseConfig.appServicePlanReuse) == 'true')
    existingAppServicePlanResourceGroupName: (empty(azureReuseConfig.existingAppServicePlanResourceGroupName) ? _azureReuseConfigDefaults.existingAppServicePlanResourceGroupName : azureReuseConfig.existingAppServicePlanResourceGroupName)
    existingAppServicePlanName: (empty(azureReuseConfig.existingAppServicePlanName) ? _azureReuseConfigDefaults.existingAppServicePlanName : azureReuseConfig.existingAppServicePlanName)
    aiSearchReuse: (empty(azureReuseConfig.aiSearchReuse) ? _azureReuseConfigDefaults.aiSearchReuse : toLower(azureReuseConfig.aiSearchReuse) == 'true')
    existingAiSearchResourceGroupName: (empty(azureReuseConfig.existingAiSearchResourceGroupName) ? _azureReuseConfigDefaults.existingAiSearchResourceGroupName : azureReuseConfig.existingAiSearchResourceGroupName)
    existingAiSearchName: (empty(azureReuseConfig.existingAiSearchName) ? _azureReuseConfigDefaults.existingAiSearchName : azureReuseConfig.existingAiSearchName)
    cosmosDbReuse: (empty(azureReuseConfig.cosmosDbReuse) ? _azureReuseConfigDefaults.cosmosDbReuse : toLower(azureReuseConfig.cosmosDbReuse) == 'true')
    existingCosmosDbResourceGroupName: (empty(azureReuseConfig.existingCosmosDbResourceGroupName) ? _azureReuseConfigDefaults.existingCosmosDbResourceGroupName : azureReuseConfig.existingCosmosDbResourceGroupName)
    existingCosmosDbAccountName: (empty(azureReuseConfig.existingCosmosDbAccountName) ? _azureReuseConfigDefaults.existingCosmosDbAccountName : azureReuseConfig.existingCosmosDbAccountName)
    existingCosmosDbDatabaseName: (empty(azureReuseConfig.existingCosmosDbDatabaseName) ? _azureReuseConfigDefaults.existingCosmosDbDatabaseName : azureReuseConfig.existingCosmosDbDatabaseName)
    keyVaultReuse: (empty(azureReuseConfig.keyVaultReuse) ? _azureReuseConfigDefaults.keyVaultReuse : toLower(azureReuseConfig.keyVaultReuse) == 'true')
    existingKeyVaultResourceGroupName: (empty(azureReuseConfig.existingKeyVaultResourceGroupName) ? _azureReuseConfigDefaults.existingKeyVaultResourceGroupName : azureReuseConfig.existingKeyVaultResourceGroupName)
    existingKeyVaultName: (empty(azureReuseConfig.existingKeyVaultName) ? _azureReuseConfigDefaults.existingKeyVaultName : azureReuseConfig.existingKeyVaultName)
    storageReuse: (empty(azureReuseConfig.storageReuse) ? _azureReuseConfigDefaults.storageReuse : toLower(azureReuseConfig.storageReuse) == 'true')
    existingStorageResourceGroupName: (empty(azureReuseConfig.existingStorageResourceGroupName) ? _azureReuseConfigDefaults.existingStorageResourceGroupName : azureReuseConfig.existingStorageResourceGroupName)
    existingStorageName: (empty(azureReuseConfig.existingStorageName) ? _azureReuseConfigDefaults.existingStorageName : azureReuseConfig.existingStorageName)
    vnetReuse: (empty(azureReuseConfig.vnetReuse) ? _azureReuseConfigDefaults.vnetReuse : toLower(azureReuseConfig.vnetReuse) == 'true')
    existingVnetResourceGroupName: (empty(azureReuseConfig.existingVnetResourceGroupName) ? _azureReuseConfigDefaults.existingVnetResourceGroupName : azureReuseConfig.existingVnetResourceGroupName)
    existingVnetName: (empty(azureReuseConfig.existingVnetName) ? _azureReuseConfigDefaults.existingVnetName : azureReuseConfig.existingVnetName)
    orchestratorFunctionAppReuse: (empty(azureReuseConfig.orchestratorFunctionAppReuse) ? _azureReuseConfigDefaults.orchestratorFunctionAppReuse: toLower(azureReuseConfig.orchestratorFunctionAppReuse) == 'true')
    existingOrchestratorFunctionAppResourceGroupName: (empty(azureReuseConfig.existingOrchestratorFunctionAppResourceGroupName) ? _azureReuseConfigDefaults.existingOrchestratorFunctionAppResourceGroupName : azureReuseConfig.existingOrchestratorFunctionAppResourceGroupName)
    existingOrchestratorFunctionAppName: (empty(azureReuseConfig.existingOrchestratorFunctionAppName) ? _azureReuseConfigDefaults.existingOrchestratorFunctionAppName : azureReuseConfig.existingOrchestratorFunctionAppName)
    dataIngestionFunctionAppReuse: (empty(azureReuseConfig.dataIngestionFunctionAppReuse) ? _azureReuseConfigDefaults.dataIngestionFunctionAppReuse : toLower(azureReuseConfig.dataIngestionFunctionAppReuse) == 'true')
    existingDataIngestionFunctionAppResourceGroupName: (empty(azureReuseConfig.existingDataIngestionFunctionAppResourceGroupName) ? _azureReuseConfigDefaults.existingDataIngestionFunctionAppResourceGroupName : azureReuseConfig.existingDataIngestionFunctionAppResourceGroupName)
    existingDataIngestionFunctionAppName: (empty(azureReuseConfig.existingDataIngestionFunctionAppName) ? _azureReuseConfigDefaults.existingDataIngestionFunctionAppName : azureReuseConfig.existingDataIngestionFunctionAppName)
    appServiceReuse: (empty(azureReuseConfig.appServiceReuse) ? _azureReuseConfigDefaults.appServiceReuse : toLower(azureReuseConfig.appServiceReuse) == 'true')
    existingAppServiceName: (empty(azureReuseConfig.existingAppServiceName) ? _azureReuseConfigDefaults.existingAppServiceName : azureReuseConfig.existingAppServiceName)
    existingAppServiceNameResourceGroupName: (empty(azureReuseConfig.existingAppServiceNameResourceGroupName) ? _azureReuseConfigDefaults.existingAppServiceNameResourceGroupName : azureReuseConfig.existingAppServiceNameResourceGroupName)
    orchestratorFunctionAppStorageReuse: (empty(azureReuseConfig.orchestratorFunctionAppStorageReuse) ? _azureReuseConfigDefaults.orchestratorFunctionAppStorageReuse : toLower(azureReuseConfig.orchestratorFunctionAppStorageReuse) == 'true')
    existingOrchestratorFunctionAppStorageName: (empty(azureReuseConfig.existingOrchestratorFunctionAppStorageName) ? _azureReuseConfigDefaults.existingOrchestratorFunctionAppStorageName : azureReuseConfig.existingOrchestratorFunctionAppStorageName)
    existingOrchestratorFunctionAppStorageResourceGroupName: (empty(azureReuseConfig.existingOrchestratorFunctionAppStorageResourceGroupName) ? _azureReuseConfigDefaults.existingOrchestratorFunctionAppStorageResourceGroupName : azureReuseConfig.existingOrchestratorFunctionAppStorageResourceGroupName)
    dataIngestionFunctionAppStorageReuse: (empty(azureReuseConfig.dataIngestionFunctionAppStorageReuse) ? _azureReuseConfigDefaults.dataIngestionFunctionAppStorageReuse : toLower(azureReuseConfig.dataIngestionFunctionAppStorageReuse) == 'true')
    existingDataIngestionFunctionAppStorageName: (empty(azureReuseConfig.existingDataIngestionFunctionAppStorageName) ? _azureReuseConfigDefaults.existingDataIngestionFunctionAppStorageName : azureReuseConfig.existingDataIngestionFunctionAppStorageName)
    existingDataIngestionFunctionAppStorageResourceGroupName: (empty(azureReuseConfig.existingDataIngestionFunctionAppStorageResourceGroupName) ? _azureReuseConfigDefaults.existingDataIngestionFunctionAppStorageResourceGroupName : azureReuseConfig.existingDataIngestionFunctionAppStorageResourceGroupName)
  }
)
